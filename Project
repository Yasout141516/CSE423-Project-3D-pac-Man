from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import math, random

# ---------------------------
# Maze Setup
# ---------------------------
grid_length = 60
outer_wall_height = 60
inner_wall_height = 40

maze_layout = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,1,0,0,0,0,0,1],
    [1,0,1,1,1,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,0,0,0,0,1,0,0,0,1],
    [1,1,1,0,1,1,1,1,1,1,0,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,1,1,1,0,1,1,1,0,1,1,0,1],
    [1,0,0,0,1,0,0,0,0,0,1,0,0,1],
    [1,1,1,0,1,1,1,1,1,1,0,1,1,1],
    [1,0,0,0,0,0,0,1,0,0,0,0,0,1],
    [1,0,1,1,1,0,0,1,0,1,1,1,0,1],
    [1,0,0,0,1,0,0,0,0,1,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],
]
grid_size = len(maze_layout)

# ---------------------------
# Pac-Man
# ---------------------------
pacman_pos = [0, 0]
pacman_angle = 0
pacman_radius = grid_length // 2 - 6
speed = 10

# ---------------------------
# Pellets
# ---------------------------
pellets = []
def init_pellets():
    global pellets
    pellets.clear()
    rows, cols = len(maze_layout), len(maze_layout[0])
    for i in range(rows):
        for j in range(cols):
            if maze_layout[i][j] == 0:
                x = (j - cols//2) * grid_length
                y = (rows//2 - i) * grid_length
                pellets.append([x, y, True])  # True = still there

# ---------------------------
# Ghosts
# ---------------------------
ghosts = []
num_ghosts = 4
ghost_colors = [(1,0,0), (0,1,1), (1,0.6,1), (1,0.5,0)]  # red, cyan, pink, orange

# ---------------------------
# Camera
# ---------------------------
cam_angle = [45, 45]
cam_dist = 500
camera_mode = "third"

# ---------------------------
# Game State
# ---------------------------
score = 0
lives = 3

# ---------------------------
# Helpers
# ---------------------------
def draw_text(x, y, text, font=GLUT_BITMAP_HELVETICA_18):
    glMatrixMode(GL_PROJECTION)
    glPushMatrix()
    glLoadIdentity()
    gluOrtho2D(0, 1000, 0, 700)
    glMatrixMode(GL_MODELVIEW)
    glPushMatrix()
    glLoadIdentity()

    glColor3f(1, 1, 1)
    glRasterPos2f(x, y)
    for ch in text:
        glutBitmapCharacter(font, ord(ch))

    glPopMatrix()
    glMatrixMode(GL_PROJECTION)
    glPopMatrix()
    glMatrixMode(GL_MODELVIEW)

# ---------------------------
# Maze Rendering
# ---------------------------
def draw_floor():
    size = grid_size * grid_length
    glColor3f(0.1, 0.1, 0.8)  # neon blue floor
    glBegin(GL_QUADS)
    glVertex3f(-size/2, -size/2, 0)
    glVertex3f( size/2, -size/2, 0)
    glVertex3f( size/2,  size/2, 0)
    glVertex3f(-size/2,  size/2, 0)
    glEnd()

def draw_wall(x, y, height):
    glPushMatrix()
    glTranslatef(x, y, height/2)
    glScalef(grid_length, grid_length, height)
    glColor3f(0.6, 0, 0.8)  # purple walls
    glutSolidCube(1)
    glPopMatrix()

def draw_maze():
    rows = len(maze_layout)
    cols = len(maze_layout[0])
    for i in range(rows):
        for j in range(cols):
            if maze_layout[i][j] == 1:
                x = (j - cols//2) * grid_length
                y = (rows//2 - i) * grid_length
                if i==0 or i==rows-1 or j==0 or j==cols-1:
                    draw_wall(x, y, outer_wall_height)
                else:
                    draw_wall(x, y, inner_wall_height)

# ---------------------------
# Pac-Man Rendering
# ---------------------------
def draw_pacman():
    glPushMatrix()
    glTranslatef(pacman_pos[0], pacman_pos[1], pacman_radius)
    glRotatef(pacman_angle, 0, 0, 1)

    glColor3f(1, 1, 0)  # yellow body
    glutSolidSphere(pacman_radius, 40, 40)

    glColor3f(0, 0, 0)  # eyes
    eye_offset = pacman_radius * 0.6
    side_offset = 10
    up_offset = pacman_radius * 0.4
    glPushMatrix()
    glTranslatef(eye_offset, side_offset, up_offset)
    glutSolidSphere(5, 10, 10)
    glPopMatrix()
    glPushMatrix()
    glTranslatef(eye_offset, -side_offset, up_offset)
    glutSolidSphere(5, 10, 10)
    glPopMatrix()
    glPopMatrix()

# ---------------------------
# Pellets Rendering
# ---------------------------
def draw_pellets():
    glColor3f(1,1,1)
    for x, y, active in pellets:
        if active:
            glPushMatrix()
            glTranslatef(x, y, 5)
            glutSolidSphere(5, 10, 10)
            glPopMatrix()

# ---------------------------
# Ghost Rendering
# ---------------------------
def draw_ghost(x, y, color):
    glPushMatrix()
    glTranslatef(x, y, grid_length/2)
    glColor3f(*color)
    glutSolidSphere(grid_length/2, 20, 20)

    # eyes
    glColor3f(1,1,1)
    glPushMatrix()
    glTranslatef(10, 10, 20)
    glutSolidSphere(5, 10, 10)
    glPopMatrix()
    glPushMatrix()
    glTranslatef(10, -10, 20)
    glutSolidSphere(5, 10, 10)
    glPopMatrix()

    glColor3f(0,0,0)
    glPushMatrix()
    glTranslatef(12, 10, 20)
    glutSolidSphere(2, 10, 10)
    glPopMatrix()
    glPushMatrix()
    glTranslatef(12, -10, 20)
    glutSolidSphere(2, 10, 10)
    glPopMatrix()
    glPopMatrix()

# ---------------------------
# Ghost Logic (stationary)
# ---------------------------
def generate_ghost():
    rows, cols = len(maze_layout), len(maze_layout[0])
    while True:
        i = random.randint(1, rows-2)
        j = random.randint(1, cols-2)
        if maze_layout[i][j] == 0:
            x = (j - cols//2) * grid_length
            y = (rows//2 - i) * grid_length
            return [x, y]

def update_ghosts():
    global ghosts, lives, pacman_pos
    for g in ghosts:
        dx = pacman_pos[0] - g[0]
        dy = pacman_pos[1] - g[1]
        dist = math.sqrt(dx**2 + dy**2)
        if dist < pacman_radius:
            print("ðŸ’€ Pac-Man caught!")
            lives -= 1
            pacman_pos[:] = [0, 0]
            if lives <= 0:
                print("GAME OVER")

# ---------------------------
# Movement & Collision
# ---------------------------
def can_move(new_x, new_y):
    rows = len(maze_layout)
    cols = len(maze_layout[0])
    r = pacman_radius * 0.7
    offsets = [(r,0), (-r,0), (0,r), (0,-r)]
    for ox, oy in offsets:
        cx = new_x + ox
        cy = new_y + oy
        ci = rows//2 - int(round(cy / grid_length))
        cj = int(round(cx / grid_length)) + cols//2
        if 0 <= ci < rows and 0 <= cj < cols:
            if maze_layout[ci][cj] == 1:
                return False
    return True

def check_pellets():
    global score
    for p in pellets:
        if p[2]:
            dx = pacman_pos[0] - p[0]
            dy = pacman_pos[1] - p[1]
            if math.sqrt(dx**2 + dy**2) < pacman_radius:
                p[2] = False
                score += 10

def keyboard(key, x, y):
    global pacman_pos, pacman_angle
    if key == b'w':
        dx = math.cos(math.radians(pacman_angle)) * speed
        dy = math.sin(math.radians(pacman_angle)) * speed
        if can_move(pacman_pos[0] + dx, pacman_pos[1] + dy):
            pacman_pos[0] += dx
            pacman_pos[1] += dy
    elif key == b's':
        dx = -math.cos(math.radians(pacman_angle)) * speed
        dy = -math.sin(math.radians(pacman_angle)) * speed
        if can_move(pacman_pos[0] + dx, pacman_pos[1] + dy):
            pacman_pos[0] += dx
            pacman_pos[1] += dy
    elif key == b'a':
        pacman_angle += 10
    elif key == b'd':
        pacman_angle -= 10

def special_keys(key, x, y):
    global cam_angle
    if key == GLUT_KEY_LEFT: cam_angle[0] -= 5
    if key == GLUT_KEY_RIGHT: cam_angle[0] += 5
    if key == GLUT_KEY_UP: cam_angle[1] += 5
    if key == GLUT_KEY_DOWN: cam_angle[1] -= 5

def mouse_click(button, state, x, y):
    global camera_mode
    if button == GLUT_RIGHT_BUTTON and state == GLUT_DOWN:
        camera_mode = "first" if camera_mode == "third" else "third"

# ---------------------------
# Camera
# ---------------------------
def setup_camera():
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()
    if camera_mode == "third":
        eye_x = pacman_pos[0] + cam_dist * math.cos(math.radians(cam_angle[0]))
        eye_y = pacman_pos[1] + cam_dist * math.sin(math.radians(cam_angle[0]))
        eye_z = cam_dist * math.sin(math.radians(cam_angle[1]))
        gluLookAt(eye_x, eye_y, eye_z,
                  pacman_pos[0], pacman_pos[1], pacman_radius,
                  0, 0, 1)
    else:
        face_offset = pacman_radius * 1.2
        eye_height  = pacman_radius * 0.6
        cam_x = pacman_pos[0] + math.cos(math.radians(pacman_angle)) * face_offset
        cam_y = pacman_pos[1] + math.sin(math.radians(pacman_angle)) * face_offset
        cam_z = eye_height
        look_x = cam_x + math.cos(math.radians(pacman_angle)) * 100
        look_y = cam_y + math.sin(math.radians(pacman_angle)) * 100
        look_z = cam_z
        gluLookAt(cam_x, cam_y, cam_z,
                  look_x, look_y, look_z,
                  0, 0, 1)

# ---------------------------
# Display & Loop
# ---------------------------
def display():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    setup_camera()
    draw_floor()
    draw_maze()
    draw_pacman()
    draw_pellets()
    for i, g in enumerate(ghosts):
        draw_ghost(g[0], g[1], ghost_colors[i % len(ghost_colors)])
    draw_text(10, 670, f"Score: {score}")
    draw_text(10, 640, f"Lives: {lives}")
    glutSwapBuffers()

def idle():
    update_ghosts()
    check_pellets()
    glutPostRedisplay()

def init():
    glClearColor(0, 0, 0, 1)
    glEnable(GL_DEPTH_TEST)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(60, 1.33, 1, 2000)
    glMatrixMode(GL_MODELVIEW)

def main():
    global ghosts
    glutInit()
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
    glutInitWindowSize(1000, 700)
    glutCreateWindow(b"3D Pac-Man - Retro Colors & Stationary Ghosts")
    init()
    init_pellets()
    ghosts = [generate_ghost() for _ in range(num_ghosts)]
    glutDisplayFunc(display)
    glutIdleFunc(idle)
    glutKeyboardFunc(keyboard)
    glutSpecialFunc(special_keys)
    glutMouseFunc(mouse_click)
    glutMainLoop()

if __name__ == "__main__":
    main()
